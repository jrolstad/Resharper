<TemplatesExport family="Live Templates">
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="87907c99-ec1a-452f-b144-278046474d3f" shortcut="btest" description="Behavioral Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="87907c99-ec1a-452f-b144-278046474d3f" shortcut="btest" description="Behavioral Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f1d2e3e-f9e3-4134-9e23-192c7512906e" shortcut="map" description="Fluent NHibernate Map Class" text="/// &lt;summary&gt;&#xD;&#xA;/// Fluent map&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;public class $POCO$FluentMap : ClassMap&lt;$POCO$&gt;&#xD;&#xA;{&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Constructor&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    public $POCO$FluentMap()&#xD;&#xA;    {&#xD;&#xA;        Table(&quot;$TableName$&quot;);&#xD;&#xA;        Id(x =&gt; x.$POCO$Id, &quot;$POCO$_id&quot;);&#xD;&#xA;        //Map(x =&gt; x.PropertyName, &quot;field_name&quot;);&#xD;&#xA;       &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="POCO" expression="" initialRange="0" />
      <Variable name="TableName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="87907c99-ec1a-452f-b144-278046474d3f" shortcut="btest" description="Behavioral Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f1d2e3e-f9e3-4134-9e23-192c7512906e" shortcut="fluentMap" description="Fluent NHibernate Map Class" text="/// &lt;summary&gt;&#xD;&#xA;/// Fluent map&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;public class $POCO$FluentMap : ClassMap&lt;$POCO$&gt;&#xD;&#xA;{&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Constructor&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    public $POCO$FluentMap()&#xD;&#xA;    {&#xD;&#xA;        Table(&quot;$TableName$&quot;);&#xD;&#xA;        Id(x =&gt; x.$POCO$Id, &quot;$POCO$_id&quot;);&#xD;&#xA;        //Map(x =&gt; x.PropertyName, &quot;field_name&quot;);&#xD;&#xA;       &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="POCO" expression="" initialRange="0" />
      <Variable name="TableName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void BeforeAll()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void AfterAll()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="87907c99-ec1a-452f-b144-278046474d3f" shortcut="btest" description="Behavioral Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f1d2e3e-f9e3-4134-9e23-192c7512906e" shortcut="fluentMap" description="Fluent NHibernate Map Class" text="/// &lt;summary&gt;&#xD;&#xA;/// Fluent map&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;public class $POCO$FluentMap : ClassMap&lt;$POCO$&gt;&#xD;&#xA;{&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Constructor&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    public $POCO$FluentMap()&#xD;&#xA;    {&#xD;&#xA;        Table(&quot;$TableName$&quot;);&#xD;&#xA;        Id(x =&gt; x.$POCO$Id, &quot;$POCO$_id&quot;);&#xD;&#xA;        //Map(x =&gt; x.PropertyName, &quot;field_name&quot;);&#xD;&#xA;       &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="POCO" expression="" initialRange="0" />
      <Variable name="TableName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="87907c99-ec1a-452f-b144-278046474d3f" shortcut="btest" description="Behavioral Test" text="&#xD;&#xA;[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f1d2e3e-f9e3-4134-9e23-192c7512906e" shortcut="fluentMap" description="Fluent NHibernate Map Class" text="/// &lt;summary&gt;&#xD;&#xA;/// Fluent map&#xD;&#xA;/// &lt;/summary&gt;&#xD;&#xA;public class $POCO$FluentMap : ClassMap&lt;$POCO$&gt;&#xD;&#xA;{&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Constructor&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    public $POCO$FluentMap()&#xD;&#xA;    {&#xD;&#xA;        Table(&quot;$TableName$&quot;);&#xD;&#xA;        Id(x =&gt; x.$POCO$Id, &quot;$POCO$_id&quot;);&#xD;&#xA;        //Map(x =&gt; x.PropertyName, &quot;field_name&quot;);&#xD;&#xA;       &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="POCO" expression="" initialRange="0" />
      <Variable name="TableName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="52a78960-fb89-4cbd-97e3-3f0a83e4bdcf" shortcut="partial" description="Creates a partial mock" text="MockRepository.GeneratePartialMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e6c9997c-4d87-470c-97b6-1d480ef55139" shortcut="piv" description="protected internal virtual" text="protected internal virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="492d80ac-36a8-4150-91d3-dbfa600be1a1" shortcut="ptest" description="Property Test" text="[Test]&#xD;&#xA;public void The_$PropertyName$_is_a_$Type$_instance()&#xD;&#xA;{&#xD;&#xA;    // Arrange&#xD;&#xA;    var sit = new $SystemUnderTest$();&#xD;&#xA;&#xD;&#xA;    // Act&#xD;&#xA;    var result = sit.$PropertyName$;&#xD;&#xA;&#xD;&#xA;    // Assert&#xD;&#xA;    Assert.That(result, Is.InstanceOfType(typeof($Type$)));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="PropertyName" expression="" initialRange="0" />
      <Variable name="Type" expression="" initialRange="0" />
      <Variable name="SystemUnderTest" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="888b80ad-81f3-4139-b6e7-daf3c0593c61" shortcut="pv" description="public virtual" text="public virtual" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="50856796-8a88-4dcd-a420-393cbb1a6a69" shortcut="test" description="Unit Test" text="[Test]&#xD;&#xA;public void $TestMethodName$()&#xD;&#xA;{&#xD;&#xA;	// Arrange&#xD;&#xA;	&#xD;&#xA;	// Act&#xD;&#xA;	&#xD;&#xA;	// Assert&#xD;&#xA;	&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="TestMethodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="1f393e0a-8c48-46a0-a867-60bd24b5932b" shortcut="nie" description="Not Implemented Exception" text="throw new NotImplementedException();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Misc" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1bf78f76-5dc5-4a85-9256-2e4ade652dd7" shortcut="a" description="NUnit Assert" text="Assert.$assertion$$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="assertion" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="13853408-ecfb-4c04-95f0-891825eb9940" shortcut="ae" description="NUnit Assert Are Equal" text="Assert.AreEqual($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d83c4a5f-e1bb-498a-9b0e-74f591b53f76" shortcut="ai" description="NUnit Assert Is Instance of Type" text="Assert.IsInstanceOfType(typeof($expected$), $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d7fd6267-0dc5-4aff-9d0c-36bd882b094c" shortcut="aif" description="NUnit Assert.IsFalse" text="Assert.IsFalse($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="3b9c5831-eb8a-446f-8959-98ff56bad914" shortcut="ain" description="NUnit Assert.IsNull" text="Assert.IsNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="0f33c7bb-c8e7-4c0d-8c99-c6c639086d7e" shortcut="ait" description="NUnit Assert.IsTrue" text="Assert.IsTrue($condition$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="condition" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e02dbb1f-6bb2-4857-8f32-4a800b19688c" shortcut="ann" description="NUnit Assert.IsNotNull" text="Assert.IsNotNull($object$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="object" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="eb7d3111-28a1-4cec-a5bf-dd9053ca2756" shortcut="as" description="NUnit Assert.AreSame" text="Assert.AreSame($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="78d41a68-989b-491c-b4e2-c7d696e92838" shortcut="at" description="NUnit Assert.That" text="Assert.That($Actual$, Is$Constraint$);$END$&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="Actual" expression="" initialRange="0" />
      <Variable name="Constraint" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="74215c80-6de6-4067-86f7-40c29fe095cb" shortcut="eea" description="NUnit Expected Exception" text="[ExpectedException(typeof($exceptionType$))]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="exceptionType" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="f429fc19-49e3-448c-9b36-95313195f028" shortcut="ig" description="NUnit Ignore" text="[Ignore(&quot;$reason$&quot;)]$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="reason" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="c2e97d4f-628e-4872-9d83-8dd62c0745cb" shortcut="sac" description="NUnit String Assert Contains" text="StringAssert.Contains($expected$, $actual$);$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="expected" expression="" initialRange="0" />
      <Variable name="actual" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e8658ae6-b1b0-4dd9-91b4-d99a1a3a7ba5" shortcut="setup" description="NUnit Setup Method" text="[SetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="29758a01-f0b0-4d5a-a4d6-5953e07576d9" shortcut="sua" description="NUnit Setup Attribute" text="[SetUp]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="40d8aefe-298f-46b1-b044-497ec1370bd7" shortcut="ta" description="NUnit Test Attribute" text="[Test]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="42bc2a54-ecba-45fd-96fe-0fbc8c1fe8f1" shortcut="tc" description="NUnit Test Case" text="[Test]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ff1dec60-4623-4fa5-9b4a-5b5160f9791c" shortcut="td" description="NUnit Tear Down" text="[TearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="608da475-96b6-4f27-b87c-f41c462bd3f7" shortcut="tda" description="NUnit Teardown Attribute" text="[TearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="366cd94f-bbf6-48ac-a1fe-790add45d6b4" shortcut="tfa" description="Test Fixture Attribute" text="[TestFixture]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="f2e92404-0c29-47b8-806b-7606c6206ae4" shortcut="tfp" description="NUnit Test Fixture Public" text="[TestFixture]&#xD;&#xA;public $END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b239f3e2-8f67-4e32-a922-3293db8debb6" shortcut="tfsu" description="NUnit Test Fixture Setup" text="[TestFixtureSetUp]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="b734480c-c2d2-424d-b130-b0c301f7bd02" shortcut="tftd" description="NUnit Test Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void $methodName$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="methodName" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="2f9ae531-ec7e-47eb-86b5-b4398f82a85f" shortcut="tftda" description="NUnit Test Fixture Teardown Attribute" text="[TestFixtureTearDown]" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="b666ff25-849b-4ee2-b2eb-5935005c26fb" shortcut="unuf" description="Using NUnit Framework" text="using NUnit.Framework;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9c913f60-d33d-4d0a-b60a-602a700b1e01" shortcut="mock" description="Generate Rhino Mock" text="MockRepository.GenerateMock&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="d77ab68a-f302-4e96-9be1-679c07390f93" shortcut="mockery" description="Rhino MockRepository" text="MockRepository mockery = new MockRepository();" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ac9f9332-129a-4ce3-8160-6366a720b77f" shortcut="stub" description="Rhino Mocks AAA Syntax for Stubs" text="MockRepository.GenerateStub&lt;$TYPE$&gt;();$END$" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="8a6d8da0-c162-4db2-a025-c8f2211eb617" shortcut="urm" description="Rhino Using block" text="using Rhino.Mocks;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="Everywhere" />
    </Scopes>
    <Categories>
      <Category name="Rhino" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
</TemplatesExport>